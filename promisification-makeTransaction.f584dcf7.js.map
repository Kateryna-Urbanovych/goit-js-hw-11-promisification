{"version":3,"sources":["js/promisification-makeTransaction.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","id","Promise","resolve","reject","delay","setTimeout","logSuccess","console","log","logError","warn","amount","then","catch"],"mappings":";AAGA,IAAMA,EAA4B,SAACC,EAAKC,GAC/BC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAGhDK,EAAkB,SAAU,GAARC,IAAAA,EAAAA,EAAAA,GACf,OAAA,IAAIC,QAAQ,SAACC,EAASC,GACnBC,IAAAA,EAAQX,EAA0B,IAAK,KAE7CY,WAAW,WACYT,KAAKE,SAAW,GAG/BI,EAAQ,CAAEF,GAAAA,EAAII,MAAAA,IAEdD,EAAOH,IAEZI,MAKLE,EAAa,SAAiB,GAAfN,IAAAA,EAAAA,EAAAA,GAAII,EAAAA,EAAAA,MACvBG,QAAQC,IAAmBR,eAAAA,OAAAA,EAAmBI,kBAAAA,OAAAA,EAA9C,QAGIK,EAAW,SAAAT,GACfO,QAAQG,KAAqCV,gCAAAA,OAAAA,EAA7C,+BAGFD,EAAgB,CAAEC,GAAI,GAAIW,OAAQ,MAC/BC,KAAKN,GACLO,MAAMJ,GAETV,EAAgB,CAAEC,GAAI,GAAIW,OAAQ,MAC/BC,KAAKN,GACLO,MAAMJ,GAETV,EAAgB,CAAEC,GAAI,GAAIW,OAAQ,KAC/BC,KAAKN,GACLO,MAAMJ,GAETV,EAAgB,CAAEC,GAAI,GAAIW,OAAQ,MAC/BC,KAAKN,GACLO,MAAMJ","file":"promisification-makeTransaction.f584dcf7.js","sourceRoot":"..\\src","sourcesContent":["                    // Задание 3\r\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, а принимала всего один параметр transaction и возвращала промис.\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = ({id}) => {\r\n    return new Promise((resolve, reject) => {\r\n        const delay = randomIntegerFromInterval(200, 500);\r\n\r\n        setTimeout(() => {\r\n            const canProcess = Math.random() > 0.3;\r\n\r\n            if (canProcess) {\r\n                resolve({ id, delay });\r\n            } else {\r\n                reject(id);\r\n            }\r\n        }, delay);\r\n    })\r\n  \r\n};\r\n\r\nconst logSuccess = ({id, delay}) => {\r\n  console.log(`Transaction ${id} processed in ${delay}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n  \r\n\r\n// Старая функция\r\n// const makeTransaction = (transaction, onSuccess, onError) => {\r\n//   const delay = randomIntegerFromInterval(200, 500);\r\n\r\n//   setTimeout(() => {\r\n//     const canProcess = Math.random() > 0.3;\r\n\r\n//     if (canProcess) {\r\n//       onSuccess(transaction.id, delay);\r\n//     } else {\r\n//       onError(transaction.id);\r\n//     }\r\n//   }, delay);\r\n// };\r\n\r\n// const logSuccess = (id, time) => {\r\n//   console.log(`Transaction ${id} processed in ${time}ms`);\r\n// };\r\n\r\n// const logError = id => {\r\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n// };\r\n\r\n/*\r\n * Работает так\r\n */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n/*\r\n * Должно работать так\r\n */\r\n// makeTransaction({ id: 70, amount: 150 })\r\n//   .then(logSuccess)\r\n//   .catch(logError);\r\n\r\n// makeTransaction({ id: 71, amount: 230 })\r\n//   .then(logSuccess)\r\n//   .catch(logError);\r\n\r\n// makeTransaction({ id: 72, amount: 75 })\r\n//   .then(logSuccess)\r\n//   .catch(logError);\r\n\r\n// makeTransaction({ id: 73, amount: 100 })\r\n//   .then(logSuccess)\r\n//   .catch(logError);"]}